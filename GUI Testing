
#%%
import pandas as pd
from pandas.api.types import CategoricalDtype
import xlsxwriter
import os
import tkinter as tk
from tkinter import filedialog as fd
#%% 
    
def get_file_extension(filename):
    #gives the file extension, without the period
    file_extension = os.path.splitext(filename)[1][1:]
    print(filename)
    print(file_extension)
    return file_extension
    
def create_original_df(filename):
    #will need to determine filetype
    file_extension = get_file_extension(filename)
    
    if (file_extension == 'csv'):
        original_df = pd.read_csv(filename)
    elif (file_extension == 'xlsx'):
        original_df = pd.read_excel
    else:
        #have to figure out what to return here, or do we somehow send back to file dialog?
        return('Bad File Extension, please reselect file')
    
    #we want to 
    
    #we want to return the original dataframe
    return original_df
    
def get_filename():
    #ideally, you would point this to the central repository
        #right now it just opens in C:/
#    fd.askopenfilename()
    
    filename = fd.askopenfilename(filetypes = (("Excel files","*.xlsx"),(".csv files","*.csv")))
#    print(filename)
    #double check the file extension
    file_extension = get_file_extension(filename)
#    print(file_extension)
    
    #loop until they pick a file or hit cancel
        #i don't have the cancel part working, so it just keeps looping until they
        #pick a good file
    while file_extension not in ['csv','xlsx']:
        #message box to return error or try again
        filename = fd.askopenfilename()
#        print(file_extension)
        file_extension = get_file_extension(filename)
#        print(filename)
    
    #send filename to have the original file read into a df
    create_original_df(filename)
    
    #load into main view

#create main window object
    #i don't know what the screenName does
#%%
#main_window = tk.Tk()
#main_window.title('Counting Seconds')
#
#
#
#button_exit = tk.Button(main_window, text='Exit', width=25, command=main_window.destroy)
#button_exit.pack()
#
##start_button = tk.Button(main_window, text='Run Program', width=25, command=make_metrics(active, 'active', header))
##start_button.pack()
#
#button_choose_file = tk.Button(main_window, text='Choose File', width=25, command=get_filename)
#button_choose_file.pack()
#
##open the window (start the program)
#main_window.mainloop()
#%%
class MyWindow:

    def __init__(self, parent):

        self.parent = parent

        self.filename = None
        self.df = None

        self.text = tk.Text(self.parent)
        self.text.pack()

        self.button = tk.Button(self.parent, text='LOAD DATA', command=self.load)
        self.button.pack()

        self.button = tk.Button(self.parent, text='DISPLAY DATA', command=self.display)
        self.button.pack()

    def load(self):

        name = fd.askopenfilename(filetypes=[('CSV', '*.csv',), ('Excel', ('*.xls', '*.xlsx'))])

        if name:
            if name.endswith('.csv'):
                self.df = pd.read_csv(name)
            else:
                self.df = pd.read_excel(name)

            self.filename = name


    def display(self):
        # ask for file if not loaded yet
        if self.df is None:
            self.load()
        
        # display if loaded
        if self.df is not None:
            self.text.insert('end', self.filename + '\n')
            self.text.insert('end', str(self.df.head()) + '\n')
        #this just keeps displaying a new head below the last 
        #we want to remove the existing and then display
#%%
# --- main ---

if __name__ == '__main__':
    root = tk.Tk()
    top = MyWindow(root)
    root.mainloop()
